# Setup ----
## Cleanup ----
rm(list = ls()) #Remove any old data loaded
graphics.off() #remove any old graphics loaded
options(scipen = 999) # Changes p-values from scientific to numeric
options(max.print = 1000000) # Makes you print a list w/o an upper limit. Otherwise might overload the computer

## Load libraries ----
# NB: read about packages on google, github, cran etc.
library(readxl) #Used to load data from Excel documents
library(tidyverse) #for easier data handling 
library(cprr) #to calculate age from CPR number
library(data.table) #to change from df to dt. a faster way to handle data.
library(DescTools) #area under the curve
library(HotellingEllipse) #Hotelling t2
library(ropls) # For doing OPLS-DA
library(writexl) #to export results in excel documents
library(broom) #for the function tidy which prepares the data for visualisation and/or export
library(Publish) #for univariate table, which is used to do multiple t tests at once. 

# First time, uncomment this code to install ropls which is used for doing OPLS-DA
# if (!require("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
# BiocManager::install("ropls", force = TRUE)


# Data loading ----
biomarkerdata = data.frame(read_xlsx('FILE NAME OF BIOMARKER ANALYSIS'))
patientdata = read.csv('FILE NAME OF PATIENT DATA ')

# Data clean up ----
## Correct names of columns ----
patientdata <- patientdata %>%
  rename_all(tolower)
names(biomarkerdata) <- gsub("-","",names(biomarkerdata)) #Removes - from all column names of the biomarkers 
names(biomarkerdata) <- gsub(" ","",names(biomarkerdata)) #Removes space from all column names of the biomarkers 
names(biomarkerdata) <- gsub("^\\d","",names(biomarkerdata)) #Removes leading numbers from all column names of the biomarkers 
names(biomarkerdata)[1] = "record_id" #Change SampleID to record_id, to combine data sets later

## Remove excluded patients ----
patientdata <- patientdata %>%
  filter(patientdata$exclusion___0 == 1)

## Correcting date formats ----
patientdata$op_date <- as.POSIXct(patientdata$op_date, format = "%Y-%m-%d  %H:%M", tz = "CET")
patientdata$end_of_surgery <- as.POSIXct(patientdata$end_of_surgery, format = "%Y-%m-%d  %H:%M", tz = "CET")
patientdata$drain_removal <- as.POSIXct(patientdata$drain_removal, format = "%Y-%m-%d  %H:%M", tz = "CET")
patientdata$discharge_date <- as.POSIXct(patientdata$discharge_date, format = "%Y-%m-%d  %H:%M", tz = "CET")
patientdata$time_painscore_1 <- as.POSIXct(patientdata$time_painscore_1, format = "%Y-%m-%d  %H:%M", tz = "CET")
patientdata$time_painscore_2 <- as.POSIXct(patientdata$time_painscore_2, format = "%Y-%m-%d  %H:%M", tz = "CET")
patientdata$time_painscore_3 <- as.POSIXct(patientdata$time_painscore_3, format = "%Y-%m-%d  %H:%M", tz = "CET")
patientdata$time_painscore_4 <- as.POSIXct(patientdata$time_painscore_4, format = "%Y-%m-%d  %H:%M", tz = "CET")
patientdata$time_painscore_5 <- as.POSIXct(patientdata$time_painscore_5, format = "%Y-%m-%d  %H:%M", tz = "CET")
patientdata$first_opioid_admin <- as.POSIXct(patientdata$first_opioid_admin, format = "%Y-%m-%d  %H:%M", tz = "CET")
patientdata$tid_fuld_mob <- as.POSIXct(patientdata$tid_fuld_mob, format = "%Y-%m-%d  %H:%M", tz = "CET")

## Factorial variables ----
patientdata$asa.factor = factor(patientdata$asa,levels = c("1","2","3","4"))
patientdata$sex.factor = factor(patientdata$sex,levels = c("1","2"))
patientdata$smoke.factor = factor(patientdata$smoke,levels = c("1","2","3","4","5","9"))

## Correcting HADS ----
#The score was coded wrongly in the codebook so the values needs to be changed to match the scoring of HADS
patientdata <- patientdata %>% mutate_at(c("hads1","hads2","hads4","hads5","hads6","hads7","hads8","hads9","hads10","hads11","hads12","hads13","hads14"), as.numeric)
### HADS-D. The scores are 1-4 and not 0-3. For each column 1 is subtracted: 
patientdata <- patientdata %>%
  mutate(across(c("hads2","hads4","hads7","hads9","hads12","hads14"), ~ . - 1))

#HADS-A. The score is 1-4 and no 3-0. So we need to invert the scorings and subtract 1. This is done by subtracting the wrong score from 4. I.e. 4-4=0, 4-3=1, 4-2=2
patientdata[,c("hads1","hads5","hads6","hads8","hads10","hads11","hads13")] <- 4 - patientdata[,c("hads1","hads5","hads6","hads8","hads10","hads11","hads13")]

#Furthermore, HADS_3 needs to be changes separately because of a mistake made in redcap.
patientdata <- patientdata %>%
  mutate(hads3 = case_when(
    hads3 == "1" ~ 3,
    hads3 == "Ja" ~ 2,
    hads3 == "2" ~ 1,
    hads3 == "3" ~ 0,
    TRUE ~ 100
  ))

# Calculated variables ----
### Demographic variables ----
#Age is calculated from patients civil registration number. 
patientdata$cpr <- str_pad(patientdata$cpr,10, pad = "0")
patientdata$age <- age(patientdata$cpr, patientdata$op_date)

## BMI is caluclated from height and weight. 
patientdata$bmi <- patientdata$weight/(patientdata$height/100*patientdata$height/100)

## grouping pre medication. 
patientdata$pre_opioid <- ifelse(patientdata$pre_analgesic___4 == 1, 1, ifelse(patientdata$pre_analgesic___5,1,ifelse(patientdata$pre_analgesic___7 == 1,1,ifelse(patientdata$pre_analgesic___8 == 1,1,0))))
patientdata$pre_neurop <- ifelse(patientdata$pre_analgesic___3 == 1,1,ifelse(patientdata$pre_analgesic___6,1,0))

## Combining the variables for each surgery type into one variable of the most invasive kind of surgery. 
patientdata$optype_highest <- ifelse(patientdata$operation_type___4 == 1, 4, ifelse(patientdata$operation_type___1 == 1, 3, ifelse(patientdata$operation_type___2,2, ifelse(patientdata$operation_type___3,1,0))))

## Any pain
patientdata$any_pain <- ifelse(patientdata$bpi1 == 0, 0,1)

### Time differences ----
patientdata$sugerytime <- difftime(patientdata$end_of_surgery, patientdata$op_date,units = "mins")
patientdata$draintime <- difftime(patientdata$drain_removal,patientdata$end_of_surgery,units = "days")
patientdata$admission_time <- difftime(patientdata$discharge_date,patientdata$op_date,units = "days")

patientdata$sugerytime <- as.numeric(patientdata$sugerytime)
patientdata$draintime <- as.numeric(patientdata$draintime)
patientdata$admission_time <- as.numeric(patientdata$admission_time)

## Oncology ----
## A new variable for location of primary cancer is made. If the origin is pulmonary (i.e., no location given in cancer_type_2) the tumor can be eiter pulmonary cancer or benign, else the original location from cancer_type_2
patientdata$cancer_location <- as.factor(ifelse(is.na(patientdata$cancer_type_2),ifelse(patientdata$cancer_type___6 == 1,7,8),patientdata$cancer_type_2))
## A binary variable on whether the cancer is of pulmonary origin or not. 
patientdata$lungcancer <- ifelse(patientdata$cancer_lung == 2,1,0)
## A binary variable on whether it is malignant or benign. 
patientdata$malignancy <- ifelse(patientdata$cancer_type___6 == 1,0,1)
## Cancer type. Condensed from many columns to one. 1: Adenocarcinoma, 2: PCC, 3: Largecell, 4: small cell, 5: carcinoid, 6: non pulmonary, 7 benign, 8 pleomorph, 9 error
patientdata <- patientdata %>%
  mutate( cancer_type = case_when(
    cancer_type___1 == 1 ~ 1,
    cancer_type___2 == 1 ~ 2,
    cancer_type___3 == 1 ~ 3,
    cancer_type___4 == 1 ~ 4,
    cancer_type___7 == 1 ~ 5,
    cancer_type___5 == 1 ~ 6,
    cancer_type___6 == 1 ~ 7,
    cancer_type___8 == 1 ~ 8,
    TRUE ~ 9
  ))

## Staging. First step is TNM classifying the metastatis to M1c
patientdata$tnm_m <- ifelse(!is.na(patientdata$cancer_type_2),2,patientdata$tnm_m)
#Afterwards, the stage is calculated based on the eighth edition of the ajcc cancer staging manual. Done using the Danish lung cancer group manual: https://www.lungecancer.dk/wp-content/uploads/2018/09/Stadieinddeling-lungekr%C3%A6ft.pdf
#Substages are converted from letters to number (e.g., IB being stage 1.5, IIIC being stage 3.6666). Stage I as IA=1, IA2=1/6, 1A3=2/6, IB=1.5, 
patientdata <- patientdata %>%
  mutate( stage = case_when(
    tnm_m > 1 ~ 4, #IVA
    tnm_n == 5 & tnm_t > 10 ~ 3+(2/3), #IIIC
    tnm_n == 5 & tnm_t < 11 ~ 3+(1/3), #IIIB
    tnm_n == 4 & tnm_t > 10 ~ 3+(1/3), #IIIB
    tnm_n == 4 & tnm_t < 11 ~ 3,       #IIIA
    tnm_n == 3 & tnm_t > 10 ~ 3,       #IIIA
    tnm_n == 3 & tnm_t < 11 ~ 2.5,     #IIB
    tnm_n == 2 & tnm_t == 12 ~ 3,      #IIIA
    tnm_n == 2 & tnm_t == 11 ~ 2.5,    #IIB
    tnm_n == 2 & tnm_t == 10 ~ 2,      #IIA
    tnm_n == 2 & tnm_t == 9 ~ 1.5,     #IB
    tnm_n == 2 & tnm_t == 7 ~ 1+(1/3), #IA3
    tnm_n == 2 & tnm_t == 6 ~ 1+(1/6), #IA2
    tnm_n == 2 & tnm_t == 5 ~ 1,       #IA1
    tnm_n == 2 & tnm_t == 1 ~ 0,       #0
    cancer_type___6 == 1 ~ 0,          #Benign = 0 
    TRUE ~ 100
  ))

## Psychological Factors ----
## HADS-A
patientdata$hads_a <- patientdata$hads1 + patientdata$hads3 + patientdata$hads5 + patientdata$hads7 + patientdata$hads9 + patientdata$hads11 + patientdata$hads13
## HADS-D
patientdata$hads_d <- patientdata$hads2 + patientdata$hads4 + patientdata$hads6 + patientdata$hads8 + patientdata$hads10 + patientdata$hads12 + patientdata$hads14
## HADS total
patientdata$hads <- patientdata$hads_a + patientdata$hads_d

##PCS
patientdata$pcs_total <- patientdata$pcs1 + patientdata$pcs2 + patientdata$pcs3 + patientdata$pcs4 + patientdata$pcs5 + patientdata$pcs6 + patientdata$pcs7 + patientdata$pcs8 + patientdata$pcs9 + patientdata$pcs10 + patientdata$pcs11 + patientdata$pcs12 + patientdata$pcs13

## QST (CPM, TSP) ----
### TSP
patientdata$tsp_score <- (patientdata$tsp8 + patientdata$tsp9 + patientdata$tsp10)/3 - (patientdata$tsp1 + patientdata$tsp2 + patientdata$tsp3)/3

### CPM
patientdata$cpm_score <- patientdata$cpm3 - patientdata$ptt1

# Outcomes ----
## Opioid dosis ----
#Opioid at the PACu is combined with opioid at the ward
patientdata$total_opioid <- patientdata$opioid2 + patientdata$opioid4
#total dose divided by patient weight
patientdata$opioid_kg <- patientdata$total_opioid/patientdata$weight

## NRS AUC ----
for (i in 1:nrow(patientdata)) {
  time1 <- difftime(patientdata$time_painscore_1[i], patientdata$end_of_surgery[i],units = "days")
  time2 <- difftime(patientdata$time_painscore_2[i], patientdata$end_of_surgery[i],units = "days")
  time3 <- difftime(patientdata$time_painscore_3[i], patientdata$end_of_surgery[i],units = "days")
  time4 <- difftime(patientdata$time_painscore_4[i], patientdata$end_of_surgery[i],units = "days")
  time5 <- difftime(patientdata$time_painscore_5[i], patientdata$end_of_surgery[i],units = "days")
  time6 <- patientdata$admission_time[i]
  auc_df <- data.table( #Makes a dt with time from end of surgery to 100 days after surgery. The 100 day trailing is done to account for the patients that are discharged within 48 hours of surgery. 
    time = c(0, time1, time2, time3, time4, time5, time6, 100),
    score = c(0, patientdata$nrs_rest_1[i],patientdata$nrs_rest_2[i],patientdata$nrs_rest_3[i],patientdata$nrs_rest_4[i],patientdata$nrs_rest_5[i],0,0)
  ) #The patients are assumed to be pain free upon discharge. 
  auc <- AUC(x = auc_df$time, y = auc_df$score, na.rm = TRUE, to = 2 )
  patientdata$mean_pain_rest[i] <- ifelse(all(is.na(auc_df$score[2:6])) ,NA,auc)
}

#Combine the two data sets ----
data <- left_join(biomarkerdata, patientdata,by = "record_id" )
## Name rows ----
rownames(data) <- data$record_id

# PCA ----
number_of_markers <- ncol(biomarkerdata) #Used to find the last column with biomarkers later. 
## PCA prcomp which examines the covariances / correlations between individuals.
res.pca <- prcomp(data[,2:number_of_markers], center = TRUE, scale. = TRUE)

## PCA princomp which examines the covariances / correlations between variables.
data.pca <- princomp(data[,2:number_of_markers],cor = TRUE,scores = TRUE)  

## Check similarity of methods----
print(data.pca)
print(res.pca)
#From here on, we will only use between variables analysis, as we are interested in patterns within biomarkers, not within patients. 

##Plot patients on the two components ----
data$Comp1 <- data.pca$scores[,1]
data$Comp2 <- data.pca$scores[,2]
scoreplot <- ggplot(data, aes(x = Comp1, y = Comp2)) +
  geom_point() +
  geom_text(
    label = data$record_id,
    nudge_x = 0.3, nudge_y = 0.3, 
    check_overlap = T,
    size = 3
  )
scoreplot
## Plot loadings ----
loadingsplot <- data.frame(data.pca$loadings[,1:2])

ggplot(loadingsplot, aes(x = Comp.1, y = Comp.2)) +
  geom_point() +
  geom_text(
    label = rownames(loadingsplot),
    nudge_x = 0.01, nudge_y = 0.01, 
    check_overlap = T,
    size = 3
  )

##Hotellings T2 score ----
hotellingdata <- data.frame(data.pca$scores)
data.pca.hotel <- ellipseParam(data = hotellingdata, k = 2) #Hotellings T2 analysis. Gives both elipse semi-axes and cutoffs. 
str(data.pca.hotel) #Outputs the result of the hotelling test

## Plot hotelling ----
#Finds the confidence intervals 
a1 <- pluck(data.pca.hotel, "Ellipse", "a.95pct") #95CI
b1 <- pluck(data.pca.hotel, "Ellipse", "b.95pct") #95CI
a2 <- pluck(data.pca.hotel, "Ellipse", "a.99pct") #99CI
b2 <- pluck(data.pca.hotel, "Ellipse", "b.99pct") #99CI
 
# No good ellipse function exist. So ellipse points are calculated. The CI values are used to determine the distance from origon.
x1 <- a1*cos(seq(0, 2*pi, length.out = 100))
y1 <- b1*sin(seq(0, 2*pi, length.out = 100))
x2 <- a2*cos(seq(0, 2*pi, length.out = 100))
y2 <- b2*sin(seq(0, 2*pi, length.out = 100))

# create a data frame of the points on the ellipses 
ellipsedata95 <- data.frame(x = x1, y = y1)
ellipsedata99 <- data.frame(x = x2, y = y2)

# plot the ellipses
scoreplot + 
  geom_path(data = ellipsedata95, aes(x = x, y = y), colour = "darkblue") +
  annotate("text", x = a1*0.8, y = b1*0.8, label = "95% limit", color = "darkblue") +
  geom_path(data = ellipsedata99, aes(x = x, y = y), colour = "darkred") +
  annotate("text", x = a2*0.8, y = b2*0.8, label = "99% limit", color = "darkred")

## Exclude patients above hotelling threshold ----
# calc t2 range. In SIMCA its expressed as "T2 range is basically calculated as the sum over the selected range of components of the scores in square divided by their standard deviations in square
data$t2range <- (data$Comp1/data.pca$sdev[1])^2 + (data$Comp2/data.pca$sdev[2])^2

#Plot data
ggplot() +
  geom_col(data = data, aes(record_id, t2range)) +
  geom_hline(yintercept = pluck(data.pca.hotel, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
  geom_hline(yintercept = pluck(data.pca.hotel, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
  annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
  annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
  labs(x = "Observations", y = "Hotelling’s T-squared Range", fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
  theme_bw()

#Check if any are above the 99 ci hotelling
data[data$t2range > data.pca.hotel$cutoff.99pct,1] 
# 1 patient above. 

#Removes data points above the threshold. 
data <- data[data$t2range <= data.pca.hotel$cutoff.99pct,]

#Redo PCA with new dataset ----
## PCA princomp which examines the covariances / correlations between variables.
data.pca <- princomp(data[,2:number_of_markers],cor = TRUE,scores = TRUE)  

## Check similarity of methods----
print(data.pca)

##Plot individual scores ----
data$Comp1 <- data.pca$scores[,1]
data$Comp2 <- data.pca$scores[,2]
scoreplot <- ggplot(data, aes(x = Comp1, y = Comp2)) +
  geom_point() +
  geom_text(
    label = data$record_id,
    nudge_x = 0.3, nudge_y = 0.3, 
    check_overlap = T,
    size = 3
  )
scoreplot
## Plot loadings ----
loadingsplot <- data.frame(data.pca$loadings[,1:2])

ggplot(loadingsplot, aes(x = Comp.1, y = Comp.2)) +
  geom_point() +
  geom_text(
    label = rownames(loadingsplot),
    nudge_x = 0.01, nudge_y = 0.01, 
    check_overlap = T,
    size = 3
  )

##Hotellings T2 score ----
hotellingdata <- data.frame(data.pca$scores)
data.pca.hotel <- ellipseParam(data = hotellingdata, k = 2) #Hotellings T2 analysis. Gives both elipse semi-axes and cutoffs. 
str(data.pca.hotel)

## Plot hotelling ----
#Finds the 95% confidence intervals 
a1 <- pluck(data.pca.hotel, "Ellipse", "a.95pct")
b1 <- pluck(data.pca.hotel, "Ellipse", "b.95pct")
a2 <- pluck(data.pca.hotel, "Ellipse", "a.99pct")
b2 <- pluck(data.pca.hotel, "Ellipse", "b.99pct")

# calculate the x and y coordinates of the ellipse
x1 <- a1*cos(theta <- seq(0, 2*pi, length.out = 100))
y1 <- b1*sin(theta <- seq(0, 2*pi, length.out = 100))
x2 <- a2*cos(theta <- seq(0, 2*pi, length.out = 100))
y2 <- b2*sin(theta <- seq(0, 2*pi, length.out = 100))

# create a data frame
ellipsedata95 <- data.frame(x = x1, y = y1)
ellipsedata99 <- data.frame(x = x2, y = y2)

# plot the ellipse
scoreplot + 
  geom_path(data = ellipsedata95, aes(x = x, y = y), colour = "darkblue") +
  annotate("text", x = a1*0.8, y = b1*0.8, label = "95% limit", color = "darkblue") +
  geom_path(data = ellipsedata99, aes(x = x, y = y), colour = "darkred") +
  annotate("text", x = a2*0.8, y = b2*0.8, label = "99% limit", color = "darkred")

## Exclude patients above hotelling threshold ----
# calc t2 range. In SIMCA its expressed as "T2 range is basically calculated as the sum over the selected range of components of the scores in square divided by their standard deviations in square
data$t2range <- (data$Comp1/data.pca$sdev[1])^2 + (data$Comp2/data.pca$sdev[2])^2

#Plot data
ggplot() +
  geom_col(data = data, aes(record_id, t2range)) +
  geom_hline(yintercept = pluck(data.pca.hotel, "cutoff.99pct"), linetype = "dashed", color = "darkred", size = .5) +
  geom_hline(yintercept = pluck(data.pca.hotel, "cutoff.95pct"), linetype = "dashed", color = "darkblue", size = .5) +
  annotate("text", x = 80, y = 13, label = "99% limit", color = "darkred") +
  annotate("text", x = 80, y = 9, label = "95% limit", color = "darkblue") +
  labs(x = "Observations", y = "Hotelling’s T-squared Range", fill = "T2 stats", caption = "Hotelling’s T-squared vs. Observations") +
  theme_bw()
#No new variables above 99% threshold

#Hieracial Cluster analysis ----
clusters <- hclust(dist(data[,c("Comp1", "Comp2")]),method = 'ward.D2')
plot(clusters, labels = data$record_id)
data$cluster2 <- as.factor(cutree(clusters, 2))

## Plot the PCA scores with color grouping based on cluster----
ggplot(data, aes(x = Comp1, y = Comp2, color = cluster2)) +
  geom_point() +
  geom_text(
    label = data$record_id,
    nudge_x = 0.3, nudge_y = 0.3, 
    check_overlap = T,
    size = 3
  )

#OPLS-DA ----
#OPLS-DA function needs a data.frame with only the variables of interest and a binary vector of groupings.
markerdata <- data.frame(data[,2:number_of_markers])
groups <- cutree(clusters, 2) #Makes two groups from the dendrogram
oplsda <- opls(markerdata, groups, predI = 1, orthoI = 1) #Run OPLS on the bimarkers with hte grouping from the dendrogram. PredI is the number of components in the analysis. OthroI is the number of orthogonal components.

#Loadings plot
plot(oplsda, typeVc = "x-loading")
plot(oplsda, typeVc = "x-score")
#Find the Variable Importance in Projection (VIP) 
VIPs <- getVipVn(oplsda)
sort(VIPs,decreasing = TRUE)
VIPs2 <- data.frame(names = names(VIPs), VIP = VIPs)

#Find the important proteins with VIP of 1 or more 
VIP_use <- VIPs2[VIPs2$VIP >= 1,]
vip_vec <- as.vector(VIP_use$names)

# MLR on important proteins ----
## Opioid Consumption----
variables_string <- paste(vip_vec, collapse = "+") #The vector of predictors is converted to a string suitable for the formula
formula_for_model <- as.formula(paste("opioid_kg~",variables_string,sep = "")) 
opioidmodel <- lm(formula_for_model, #The model is defined globally to be used in further analyses
                       data = data, 
                       na.action = na.exclude)
summary(opioidmodel)
write_xlsx(tidy(opioidmodel), "opioidmodel.xlsx")

## Pain Scores----
variables_string <- paste(vip_vec, collapse = "+") #The vector of predictors is converted to a string suitable for the formula
formula_for_model <- as.formula(paste("mean_pain_rest~",variables_string,sep = "")) 
painmodel <- lm(formula_for_model, #The model is defined globally to be used in further analyses
                  data = data, 
                  na.action = na.exclude)
summary(painmodel)
write_xlsx(tidy(painmodel), "painmodel.xlsx")
# t tests using univariate table ----
# T tests are made for all clinical variables and biomarkers. 
## Clinical variables ----
ttests <- univariateTable(data = data, cluster2~ opioid_kg+mean_pain_rest+nrs_rest_1+nrs_rest_2+nrs_rest_3+nrs_rest_4+nrs_rest_5+nrs_mob_1+nrs_mob_2+nrs_mob_3+nrs_mob_4+nrs_mob_5+nrs_cough_1+nrs_cough_2+nrs_cough_3+nrs_cough_4+nrs_cough_5+
                            age + bmi + sex.factor + ps + gfr + pre_opioid +pre_neurop + pre_analgesic___2+bpi1+
                            draintime  + optype_highest + sugerytime + io_fentanyl + io_toradol+ 
                            pcs_total + hads_d + hads_a+
                            pdt1 + ptt1 + cpm_score + tsp_score+
                            cancer_lung+stage+cancer_type___1+cancer_type___2+cancer_type___3+cancer_type___4+cancer_type___5+cancer_type___6+cancer_type___7+cancer_type___8+
                            admission_time+draintime)
summary(ttests)
write_xlsx(summary(ttests), "ttests.xlsx") #Exporting tables as excel

## Biomarkers ----
vector_of_biomarkers <- colnames(data[,2:number_of_markers]) #Finds all biomarker names
biomarkers_string <- paste(vector_of_biomarkers, collapse ="+") #The vector of predictors is converted to a string suitable for the formula
formula_for_ttest <- as.formula(paste("cluster2~",biomarkers_string,sep = "")) #Convert the string to a formula for univariateTable. 
biomarker_ttests <- univariateTable(data = data, formula = formula_for_ttest)
summary(biomarker_ttests)

# MLR with backward elimination ----
elimination <- function(data,vector_of_predictors,outcome,exclusion_criteria) {
  #Gives an error and exits the function if the outcome is not in the data frame 
  if (!(exists(outcome, where = data))){
    return(paste("Error, ",outcome," not found in data",sep = ""))
  }
  predictors_vector <- vector_of_predictors #defines as a new vector inside the function 
  worst.Predictor.p = 1 #To make the while loop run later in the function. Will be overwritten
  #Defining a dataframe to store performance of the model before a while loop for elimination
  performance_df <<- data.frame( 
    R.Squared = 0,
    Adj.R.Squared = 0,
    number.predictors = 0,
    Worst.Predictor.name = 0,
    Worst.Predictor.p = 0
  )
  iteration <- 1 #Iteration variable is used to input the steps of the elimination in the right place in the dataframe.
  
  while (worst.Predictor.p>exclusion_criteria) { #A new round of elimination will run if the worst performing predictor has a p value above the exclusion criteria
    variable_string <- paste(predictors_vector, collapse ="+") #The vector of predictors is converted to a string suitable for the formula
    formula_for_model <- as.formula(paste(outcome,"~",variable_string,sep = "")) 
    predictionmodel <<- lm(formula_for_model, #The model is defined globally to be used in further analyses
                           data = data, 
                           na.action = na.exclude)
    index <- order(coef(summary(predictionmodel))[,4])  # Finds the index of p values from lowest to highest
    coefs <- summary(predictionmodel)$coefficients # Finds the variables in the model and their values
    coefs <- data.frame(coefs[order(coefs[,4],decreasing = TRUE),]) # Sorts the variables in the model from least to most significant 
    worst <- coefs[1,]
    worst.Predictor.name <- row.names(worst)
    worst.Predictor.p <- coefs[1,4]
    #In case the intercept is the least significant variable in the model, takes the second least significant variable, because we cant remove the intercept.
    if (worst.Predictor.name == "(Intercept)") {
      worst <- coefs[2,]
      worst.Predictor.name <- row.names(worst)
      worst.Predictor.p <- coefs[2,4]
    }
    #Inputs all the data on model performance of elimination in a dataframa accessable (<<-) globally
    performance_df[iteration,] <<- data.frame(
      R.Squared = summary(predictionmodel)$r.squared,
      Adj.R.Squared = summary(predictionmodel)$adj.r.squared,
      number.predictors = nrow(coefs)-1,
      Worst.Predictor.name = worst.Predictor.name,
      Worst.Predictor.p = worst.Predictor.p
    )
    predictors_vector <- predictors_vector[predictors_vector != worst.Predictor.name] #Removes the least significant variable
    iteration <- iteration + 1 #Adds one to the iteration variable.
  }
  #Outputs the model summary and the performance dataframe.
  print(summary(predictionmodel))
  return(performance_df)
}

# Backward elimination is done on prediction models of both outcomes. 
elimination(data = data,vector_of_predictors = vector_of_biomarkers,outcome = "opioid_kg",exclusion_criteria = 0.157)
write_xlsx(list("Coefs Final" = tidy(predictionmodel),
                "Stats Final" = data.frame("Variable" = c("R2","Adjusted R2"),
                                           "Value" = c(summary(predictionmodel)$r.squared,summary(predictionmodel)$adj.r.squared)),
                "Performance" = performance_df),
           "mlropioid.xlsx")

mlr_pain <- elimination(data = data,vector_of_predictors = vector_of_biomarkers,outcome = "mean_pain_rest",exclusion_criteria = 0.157)
write_xlsx(list("Coefs Final" = tidy(predictionmodel),
                "Stats Final" = data.frame("Variable" = c("R2","Adjusted R2"),
                                           "Value" = c(summary(predictionmodel)$r.squared,summary(predictionmodel)$adj.r.squared)),
                "Performance" = performance_df),
           "mlrpain.xlsx")
